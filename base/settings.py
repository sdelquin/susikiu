"""
Django settings for base project.

Generated by "django-admin startproject" using Django 1.9.6.

For more information on this file, see
https://docs.djangoproject.com/en/1.9/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.9/ref/settings/
"""

import os
from django.contrib.messages import constants as message_constants
from redis import Redis
from rq import Queue
from prettyconf import config

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.9/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY')

# SECURITY WARNING: don"t run with debug turned on in production!
DEBUG = config('DEBUG', default='True', cast=config.boolean)

ALLOWED_HOSTS = config(
    'ALLOWED_HOSTS',
    default='127.0.0.1, localhost',
    cast=config.list
)

# Application definition

INSTALLED_APPS = [
    "app.apps.AppConfig",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    'django.contrib.postgres',
    "bootstrapform",
    "import_export",
]

MIDDLEWARE_CLASSES = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.auth.middleware.SessionAuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "base.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "app.processors.globals"
            ],
        },
    },
]

WSGI_APPLICATION = "base.wsgi.application"


# Database
# https://docs.djangoproject.com/en/1.9/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config('DATABASE_NAME'),
        'USER': config('DATABASE_USER'),
        'PASSWORD': config('DATABASE_PASSWORD'),
        'HOST': 'localhost'
    }
}


# Password validation
# https://docs.djangoproject.com/en/1.9/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.\
UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.\
MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.\
CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.\
NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/1.9/topics/i18n/

LANGUAGE_CODE = "es-ES"

TIME_ZONE = config('TIME_ZONE', default='UTC')

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.9/howto/static-files/

STATIC_URL = "/static/"
MEDIA_URL = "/media/"

LOGFILE_NAME = os.path.join(BASE_DIR, "susikiu.log")
LOGFILE_SIZE = 1 * 1024 * 1024
LOGFILE_COUNT = 3

LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "formatters": {
        "verbose": {
            "format": "%(levelname)s %(asctime)s %(module)s \
%(process)d %(thread)d %(message)s",
            "datefmt": "%d/%b/%Y %H:%M:%S",
        },
    },
    "handlers": {
        # Log to a text file that can be rotated by logrotate
        "logfile": {
            "level": "ERROR",
            "formatter": "verbose",
            "class": "logging.handlers.RotatingFileHandler",
            "filename": LOGFILE_NAME,
            "maxBytes": LOGFILE_SIZE,
            "backupCount": LOGFILE_COUNT,
        },
    },
    "loggers": {
        "django": {
            "handlers": ["logfile"],
            "level": "ERROR",
            "propagate": True,
        },
    },
}

BGVIDEO_ID = "SmGSu_4bifg"
ELEBE_TOKEN = config('ELEBE_TOKEN')

SENDGRID_APIKEY = config('SENDGRID_APIKEY')
SENDGRID_FROM_EMAIL = config('SENDGRID_FROM_EMAIL')
SENDGRID_FROM_NAME = config('SENDGRID_FROM_NAME')

# in order to take advantage of bootstrap alerts
MESSAGE_TAGS = {
    message_constants.ERROR: "danger"
}

REDIS = Redis(host="localhost", db=0)
RQ = Queue(connection=REDIS)

GOOGLE_API = config('GOOGLE_API')

NAMES_URL = "http://names.sdelquin.me/random/"

LOGIN_URL = "/login/"

BACHATA_SPOTIFY_LIST = config('BACHATA_SPOTIFY_LIST')
SALSA_SPOTIFY_LIST = config('SALSA_SPOTIFY_LIST')

AVATAR_SIZE = (450, 450)

SOCIAL_NETWORKS_BASE_URL = {
    "TWITTER": "http://twitter.com/",
    "FACEBOOK": "http://facebook.com/",
    "SNAPCHAT": "http://snapchat.com/add/",
    "INSTAGRAM": "http://instagram.com/"
}

STATICFILES_STORAGE = config(
    'STATICFILES_STORAGE',
    default='django.contrib.staticfiles.storage.StaticFilesStorage'
)
STATIC_ROOT = config('STATIC_ROOT', default=os.path.join(BASE_DIR, '/static'))
MEDIA_ROOT = config('MEDIA_ROOT', default=os.path.join(BASE_DIR, '/media'))
